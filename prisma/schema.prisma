// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Represents an account associated with a user
model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

// Represents a user
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isAdmin       Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
}

// Represents a verification request
model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// Represents an order
model Order {
  id        Int      @id @default(autoincrement())
  products  ProductOnOrder[]
  table     Table    @relation(fields: [tableId], references: [id])
  tableId   Int
  invoiceId Int?     @unique
  invoice   Invoice? 
  served    Boolean  @default(false)
  paid      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  userEmail String
}

// Represents a product
model Product {
  id        Int      @id @default(autoincrement())
  name      String
  price     Float
  category  String
  img       String?
  orders    ProductOnOrder[]
}

// Represents a product on an order
model ProductOnOrder {
  orderId   Int
  productId Int
  quantity  Int
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@id([orderId, productId])
}

// Represents a table
model Table {
  id        Int      @id @default(autoincrement())
  number    Int      @unique
  orders    Order[]
}

// Represents an invoice
model Invoice {
  id        Int      @id @default(autoincrement())
  total     Float
  paid      Boolean  @default(false)
  orderId   Int      @unique
  order     Order    @relation(fields: [orderId], references: [id])
}